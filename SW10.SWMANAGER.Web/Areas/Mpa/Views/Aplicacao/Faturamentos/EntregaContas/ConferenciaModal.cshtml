@using SW10.SWMANAGER.Web.Areas.Mpa.Models.Common.Modals
@using SW10.SWMANAGER.Web.Areas.Mpa.Views.SMWEHelpers

@model SW10.SWMANAGER.Web.Areas.Mpa.Models.Aplicacao.Faturamentos.ContasMedicas.CriarOuEditarContaMedicaModalViewModel

@Html.Partial("~/Areas/Mpa/Views/Common/Modals/_ModalHeader.cshtml", new ModalHeaderViewModel(Model.IsEditMode ? (L("EditContaMedica") + ": " + Model.Titular) : L("CreateNewContaMedica")))

<script src="~/libs/PDFObject/pdfobject.min.js"></script>
<script src="~/Areas/Mpa/Views/Aplicacao/Faturamentos/ModuloFaturamento.js"></script>

<div class="modal-body container-fluid">
    <!-- HIDDENS USADOS PARA FILTRAGEM DE COMBOS -->
    <input type="hidden" name="atendimento-convenio-id" id="atendimento-convenio-id" value="@Model.Atendimento.ConvenioId" />
    <input type="hidden" name="conta-convenio-id" id="conta-convenio-id" value="@Model.ConvenioId" />

    <form name="ContaMedicaInformationsForm" role="form" novalidate class="form-validation">

        <input type="hidden" name="StatusId" id="confirma-conferencia" value="@Model.StatusId.ToString()" />

        @if (Model.IsEditMode)
        {
            <input type="hidden" id="conta-id" name="Id" value="@Model.Id" />
            <input type="hidden" name="CreationTime" value="@Model.CreationTime" />
            <input type="hidden" name="CreatorUserId" value="@Model.CreatorUserId" />
            <input type="hidden" id="atendimento-id" name="AtendimentoId" value="@Model.AtendimentoId" />
        }

        @using (Html.Row())
        {
            Html.SWInput(new SWTag("inp-empresa", "Empresa", L("Empresa"), value: Model.EmpresaNome, col: 3, disabled: true));

            if (Model.IsEditMode)
            {
                var textAtendimento = Model.AtendimentoCodigo + " - " + Model.PacienteNome;
                Html.SWInput(new SWTag("inp-atendimento", "Atendimento", L("Atendimento"), value: textAtendimento, col: 3, disabled: true));
            }
            else
            {
                if (Model.AtendimentoId.HasValue && Model.AtendimentoId != 0)
                {
                    var textAtendimento = Model.AtendimentoCodigo + " - " + Model.PacienteNome;
                    Html.Select2For(m => m.AtendimentoId, "modal-atendimento-id", "select2Atendimento", L("Atendimento"), Model.AtendimentoId.ToString(), textAtendimento, "atendimento/ListarDropdown", "", 3, false);
                }
                else
                {
                    Html.Select2For(m => m.AtendimentoId, "modal-atendimento-id", "select2Atendimento", L("Atendimento"), "", "", "atendimento/ListarDropdown", "", 3, false);
                }
            }

            var valueDataInicio = Model.DataIncio != null ? ((DateTime)Model.DataIncio).ToString("MM/dd/yyyy HH:mm") : "";
            Html.SWInput(new SWTag("inp-data-atd", "DataAtendimento", L("DataAtendimento"), value: valueDataInicio, col: 2, disabled: true));
            Html.SWInput(new SWTag("numero-guia", "NumeroGuia", L("NumeroGuia"), col: 2, disabled: true, value: Model.GuiaNumero));
            var valueDataFim = Model.DataFim != null ? ((DateTime)Model.DataFim).ToString("MM/dd/yyyy HH:mm") : "";
            Html.SWInput(new SWTag("inp-data-alta", "DataAlta", L("DataAlta"), value: valueDataFim, col: 2, disabled: true));
        }

        <div class="row">
            <div class="col-sm-12">
                <div id="contas">contas</div>
                <script>
                    $('#contas').load('@Url.Action("_ContaMedicas", "ContasMedicas", new { id = Model.AtendimentoId })');
                </script>
                <br />
            </div>
        </div>

        @using (Html.Abas())
        {
            Html.Aba("#tab_info", L("InformacoesConta"), true);
            Html.Aba("#tab_contaItens", L("ContaItens"), false);
            Html.Aba("#tab_kits", L("Kits"), false);
            Html.Aba("#tab_pacotes", L("Pacotes"), false);
            Html.Aba("#tab_relatorio", L("Relatorio"), false);
        }

        @using (Html.AbasConteudo())
        {
            using (Html.AbaConteudo("tab_info", true))
            {
                using (Html.Row())
                {
                    var valueDataInicio = Model.DataIncio != null ? ((DateTime)Model.DataIncio).ToString("MM/dd/yyyy HH:mm") : "";
                    Html.DatePickerFor(m => m.DataIncio, valueDataInicio, L("DataInicial"), col: 2);
                    var valueDataFim = Model.DataFim != null ? ((DateTime)Model.DataFim).ToString("MM/dd/yyyy HH:mm") : "";
                    Html.DatePickerFor(m => m.DataFim, valueDataFim, L("DataFinal"), col: 2);
                    Html.Select2For(m => m.TipoAcomodacaoId, "comboTipoLeito", "select2Leito", L("Leito"), Model.TipoAcomodacaoId.ToString(), Model.TipoAcomodacaoDescricao, "tipoLeito/ListarDropdown", "", 2, false);
                    Html.Select2For(m => m.TipoAcomodacaoId, "comboTipoAlta", "select2TipoAlta", L("TipoAlta"), Model.TipoAcomodacaoId.ToString(), Model.TipoAcomodacaoDescricao, "tipoLeito/ListarDropdown", "", 2, false);
                    Html.Select2For(m => m.MedicoId, "cbo-conta-medico", "select2Medico", L("Medico"), Model.MedicoId.ToString(), Model.MedicoNome, "medico/ListarDropdown", "", 4, false, dataServico: "medico");
                    Html.Select2For(m => m.ConvenioId, "cbo-conta-convenio", "contaConvenioSel2", L("Convenio"), Model.ConvenioId.ToString(), Model.ConvenioNome, "convenio/ListarDropdown", "", 2, required: false, dataServico: "convenio");

                    // Html.Select2For(m => m.PlanoId, "cbo-conta-plano", "contaPlanosSel2", L("Plano"), Model.PlanoId.ToString(), Model.PlanoNome, "plano/listarPorConvenioExclusivoDropdown", "conta-convenio-id", 2, required: false);
                    <div class="col-sm-2">
                        <div class="form-group">
                            <label>@L("Plano")</label>
                            <select name="PlanoId" value="@Model.PlanoId.ToString()" id="cbo-conta-plano" class="form-control select2 contaPlanosSel2" style="width:auto">
                                <option value="@Model.PlanoId.ToString()"> @(Model.Plano != null ? Model.Plano.Descricao : "Selecione") </option>
                            </select>
                        </div>
                    </div>

                    Html.Select2For(m => m.GuiaId, "comboGuia", "select2Guia", "Guia", Model.GuiaId.ToString(), Model.GuiaNumero, "guia/ListarDropdown", "", 2, false);
                    using (Html.InputFor(m => m.CodDependente, new SWTag("cod-dependente", "codDependente", "", value: Model.CodDependente, col: 2), L("CodigoDependente"))) { }
                    using (Html.InputFor(m => m.Titular, new SWTag("titular", "Titular", "", value: Model.Titular, col: 4), L("Titular"))) { }
                    var valueValidadeCarteira = Model.ValidadeCarteira != null ? ((DateTime)Model.ValidadeCarteira).ToString("MM/dd/yyyy") : "";
                    Html.DatePickerFor(m => m.ValidadeCarteira, valueValidadeCarteira, L("ValidadeCarteira"), col: 2);
                    var valueDataAutorizacao = Model.DataAutorizacao != null ? ((DateTime)Model.DataAutorizacao).ToString("MM/dd/yyyy") : "";
                    Html.DatePickerFor(m => m.DataAutorizacao, valueDataAutorizacao, L("DataAutorizacao"), col: 2);
                    using (Html.InputFor(m => m.GuiaOperadora, new SWTag("guia-operadora", "guiaOperadora", "", value: Model.GuiaOperadora, col: 2), L("GuiaOperadora"))) { }
                    using (Html.InputFor(m => m.SenhaAutorizacao, new SWTag("senha-autorizacao", "senhaAutorizacao", "", value: Model.SenhaAutorizacao, col: 2), L("SenhaAutorizacao"))) { }
                }
            }

            using (Html.AbaConteudo("tab_contaItens", false))
            {
                <span id="CreateNewContaItemButton" class="btn btn-primary blue"><i class="fa fa-plus"></i> @L("CreateNewContaItem")</span>
                <div id="ContaItensTable"></div>
                <br />

                using (Html.Row())
                {
                    using (Html.Col("sm", 6))
                    {
                        <span class="btn">@L("Relatorio")</span>
                    }

                    <div class="col-sm-6 text-right">
                        TOTAL DA CONTA: R$ <input id="conta-total" style="width:100px; text-align:center;" disabled />
                    </div>
                }
            }

            using (Html.AbaConteudo("tab_kits", false))
            {
                <span id="CreateNewKitButton" class="btn btn-primary blue"><i class="fa fa-plus"></i> @L("CreateNewKit")</span>
                <div id="KitsTable"></div>
            }

            using (Html.AbaConteudo("tab_pacotes", false))
            {
                <span id="CreateNewPacoteButton" class="btn btn-primary blue"><i class="fa fa-plus"></i> @L("CreateNewPacote")</span>
                <div id="PaotesTable"></div>
            }

            using (Html.AbaConteudo("tab_relatorio", false))
            {
                using (Html.Abas())
                {
                    Html.Aba("#tab_rel_conta", L("ContaMedica"), true);
                    Html.Aba("#tab_rel_guia", L("Guia"), false);
                }

                using (Html.AbasConteudo())
                {
                    using (Html.AbaConteudo("tab_rel_conta", true))
                    {
                        <div class="row">
                            <div class="col-sm-12">
                                <span class="btn" id="atualizar-btn">ATUALIZAR</span>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-sm-12">
                                <iframe id="fVisualizar" src="" style="width:100%; height:400px; border:none 0; background-color:white"></iframe>
                            </div>
                        </div>
                    }

                    using (Html.AbaConteudo("tab_rel_guia", false))
                    {
                        <span class="btn" id="guia-teste">ATUALIZAR</span>
                        <div id="relat" style="width:100%; height:700px; display:none;"></div>
                    }
                }
            }
        }

    </form>
</div>

@if (Model.Conferencia)
{
    var motivoPendencia = string.IsNullOrEmpty(Model.MotivoPendencia) ? "Informe aqui o motivo da pendência..." : Model.MotivoPendencia;

    <div class="modal-footer">
        <button type="button" class="btn default close-button" data-dismiss="modal">@L("Cancel")</button>
        <div style="display:inline-block;">
            <button type="button" class="btn btn-primary" id="btn-declara-pendencia" style="background-color:orange;"><i class="glyphicon glyphicon-exclamation-sign"></i> <span>@L("Pendencia")</span></button>
            <div id="div-motivo-pendencia" style="display:none; position:absolute; width:300px;">
                <textarea id="motivo-pendencia" style="position:relative; top:10px; width:300px; padding:5px;" rows="5">@motivoPendencia</textarea>
                <button type="button" id="btn-confirma-pendencia" class="btn default" data-dismiss="modal" style="position:relative; top:15px;">@L("ConfirmarPendencia")</button>
            </div>
        </div>

        <button type="button" class="btn btn-info" id="btn-confirma-conferencia"><i class="fa fa-check"></i> <span>@L("ConfirmarConferencia")</span></button>
    </div>
}
else
{
    @Html.Partial("~/Areas/Mpa/Views/Common/Modals/_ModalFooterWithSaveAndCancel.cshtml")
}



<script type="text/javascript">

    // Combo plano filtrando opr convenio problematico
    $(".contaPlanosSel2").select2({
        ajax: {
            url: "/api/services/app/plano/ListarPorConvenioExclusivoDropdown",
            dataType: 'json',
            delay: 250,
            method: 'Post',
            data: function (params) {
                if (params.page == undefined)
                    params.page = '1';
                return {
                    search: params.term,
                    page: params.page,
                    totalPorPagina: 10
                };
            },
            processResults: function (data, params) {
                params.page = params.page || 1;

                return {
                    results: data.result.items,
                    pagination: {
                        more: (params.page * 10) < data.result.totalCount
                    }
                };
            },
            cache: true
        },
        escapeMarkup: function (markup) { return markup; }, // let our custom formatter work
        minimumInputLength: 0
    });

    // Corrigindo filtragem de combo planos de acordo com convenio selecionado
    select2MestreFor('cbo-conta-convenio', 'contaPlanosSel2', 'plano/ListarPorConvenioExclusivoDropdown');
    //$('#cbo-conta-convenio').empty().trigger('change');
    $('#cbo-conta-convenio').swSetCampo('@Model.ConvenioId', abp.services.app.convenio);
    $('#cbo-conta-plano').swSetCampo('@Model.PlanoId', abp.services.app.plano);
    // fim - combo plano

    // TESTE - Temp
    $('#teste').on('click', function(e){
        e.preventDefault();
        $('#guia-teste').swBtnCrudAlternaIcone();
    });

    // Teste relatorio Guia Spsadt
    var iframeRelatoriog = $("#fVisualizarg");
    iframeRelatoriog.hide();

    $("#guia-teste").click(function (e) {
        e.preventDefault();
        @*var url = '@Url.Action("VisualizarSpsadt")';*@
        $('#relat').show();
        var caminho = "@Url.Action("VisualizarSpsadt", "FaturamentoGuias", new { ContaId = Model.Id, AtendimentoId = Model.AtendimentoId })";
        PDFObject.embed(caminho, "#relat");
    });
    // FIM - Teste relatorio Guia Spsadt

    // Relatorio
    var iframeRelatorio = $("#fVisualizar");
    iframeRelatorio.hide();

    $("#atualizar-btn").click(function () {
        var url = '@Url.Action("VisualizarRelatorio")' + '?contaMedicaId=' + '@Model.Id';
        fVisualizar.src = url;
        iframeRelatorio.show();
    });
    // FIM - relatorio

    // Combos Convenio-Plano
    $('#comboConvenioAtd').on('change', function () {
        var id = $(this).val();
        $('#atendimento-convenio-id').val(id);
        if (id == null) {
            $('#cbo-atendimento-plano').swCboReset();
        }
    });
    $('#cbo-conta-convenio').on('change', function () {
        var id = $(this).val();
        $('#conta-convenio-id').val(id);
        $('#cbo-conta-plano').swCboReset();

    });
    // Fim - combos convenio/plano
    $('#cbo-modal-atendimento-id').on('change', function () {
        var id = $(this).val();
        $('#atendimento-id').val(id);

    });


    // Calcular valor
    $('#btn-calcular-valor').on('click', function (e) {
        var contaId = parseInt('@Model.Id');
        abp.services.app.conta.calcularValorConta(contaId)
            .done(function (data) {
                var valorFinal = SmweSavior.formataDinheiro(data);
                $('#info-valor-total').val(valorFinal);
            });
    });

    // Enter altera focus
    // Fim - Enter altera focus

    // Itens da conta
    var _$ContaItensTable = $('#ContaItensTable');
    var _ContaItensService = abp.services.app.faturamentoContaItem;
    var _$filterForm = $('#ContaItensFilterForm');

    var _permissions = {
        create: abp.auth.hasPermission('Pages.Tenant.Cadastros.Faturamento.ContaItens.Create'),
        edit: abp.auth.hasPermission('Pages.Tenant.Cadastros.Faturamento.ContaItens.Edit'),
        'delete': abp.auth.hasPermission('Pages.Tenant.Cadastros.Faturamento.ContaItens.Delete')
    };

    var _createOrEditModal = new app.ModalManager({
        viewUrl: abp.appPath + 'Mpa/FaturamentoContaItens/CriarOuEditarModal',
        scriptUrl: abp.appPath + 'Areas/Mpa/Views/Aplicacao/Faturamentos/ContaItens/_CriarOuEditarModal.js',
        modalClass: 'CriarOuEditarContaItemModal'
    });

    //  debugger
    var configsPorEmpresa = @Html.Raw(Json.Encode(Model.configsPorEmpresa));
    var configsPorPlano = @Html.Raw(Json.Encode(Model.configsPorPlano));

    _$ContaItensTable.jtable({
        title: app.localize('ContaItens'),
        paging: true,
        sorting: true,
        multiSorting: true,
        actions: {
            listAction: {
                method: abp.services.app.conta.listarItensVM
            }
        },
        fields: {
            id: {
                key: true,
                list: false
            },
            actions: {
                title: app.localize('Actions'),
                width: '9%',
                sorting: false,
                display: function (data) {
                    var $span = $('<span></span>');
                    $('<button class="btn btn-default btn-xs" title="' + app.localize('Edit') + '"><i class="fa fa-edit"></i></button>')
                        .appendTo($span)
                        .click(function (e) {
                            e.preventDefault();
                            _createOrEditModal.open({ id: data.record.id, contaId: '@Model.Id' });
                        });
                    $('<button class="btn btn-default btn-xs" title="' + app.localize('Delete') + '"><i class="fa fa-trash-alt"></i></button>')
                        .appendTo($span)
                        .click(function (e) {
                            e.preventDefault();
                            deleteContaItens(data.record.id);
                        });
                    return $span;
                }
            }
            ,
            grupo: {
                title: app.localize('Grupo'),
                width: '10%'

            }
            ,
            descricao: {
                title: app.localize('Descricao'),
                width: '20%'
            }
            ,
            qtde: {
                title: app.localize('Qtde.'),
                width: '3%'
            }
            ,
            valorItem: {
                title: app.localize('ValorUnitario'),
                width: '7%',
                display: function(data){
                    return data.record.valorItem.toFixed(2);
                }
            }
            ,
            valorTotal: {
                title: app.localize('ValorTotal'),
                width: '7%',
                display: function(data){
                    var valorTotal = data.record.valorItem * data.record.qtde;
                    return valorTotal.toFixed(2);
                }
            }
            ,
            data: {
                title: app.localize('Data'),
                width: '8%',
                display: function (data) {
                    if (data.record.data) {
                        return moment(data.record.data).format("L LT");
                    }
                }
            }
            ,
            turnoDescricao: {
                title: app.localize('Turno'),
                width: '8%'
            }
            ,
            unidadeOrganizacionalDescricao: {
                title: app.localize('LocalUtilizacao'),
                width: '8%'
            }
            ,
            tipo: {
                title: app.localize('Tipo'),
                width: '7%'
            }
            ,
            tipo: {
                title: app.localize('Tipo'),
                width: '7%'
            }
        }
        ,
        recordsLoaded:  function (event, data) {
            calcularTotalConta({
                Itens:data.records
            });
            ////console.log(data.records);
        }
    });

    function calcularTotalConta(itens){
        abp.services.app.conta.calcularTotalConta(itens)
        .done(function(data){
            $('#conta-total').val(data.toFixed(2));
        })
    }

    function getContaItens(reload) {
        if (reload) {
            _$ContaItensTable.jtable('reload');
        } else {
            _$ContaItensTable.jtable('load', {
                filtro: '@Model.Id',
                CalculoContaItemInput: {
                    Conta: {
                        EmpresaId:@Model.EmpresaId,
                        ConvenioId:@Model.ConvenioId,
                        PlanoId:@Model.PlanoId,
                    },
                    configsPorPlano:configsPorPlano,
                    configsPorEmpresa:configsPorEmpresa
                }
            });
        }
    }

    function deleteContaItens(contaItem) {
        abp.message.confirm(
            app.localize('DeleteWarning', contaItem),
            function (isConfirmed) {
                if (isConfirmed) {
                    _ContaItensService.excluirVM(contaItem)
                        .done(function () {
                            getContaItens(true);
                            abp.notify.success(app.localize('SuccessfullyDeleted'));
                        });
                }
            }
        );
    }

    $('#CreateNewContaItemButton').click(function () {
        var cid = '@Model.Id';
        _createOrEditModal.open({ id: null, contaId: cid });
    });

    $('#ExportarContaItensParaExcelButton').click(function () {
        _ContaItensService
            .listarParaExcel({
                filtro: $('#ContaItensTableFilter').val(),
                //sorting: $(''),
                maxResultCount: $('span.jtable-page-size-change select').val()
            })
            .done(function (result) {
                app.downloadTempFile(result);
            });
    });

    $('#GetContaItensButton, #RefreshContaItensListButton').click(function (e) {
        e.preventDefault();
        getContaItens();
    });

    abp.event.on('app.CriarOuEditarContaItemModalSaved', function () {
        getContaItens(true);
    });

    getContaItens();

    $('#ContaItensTableFilter').focus();

    // Kits
    var _$ContaKitsTable = $('#KitsTable');
    var _ContaKitsService = abp.services.app.faturamentoContaKit;
    var _$kitFilterForm = $('#ContaKitssFilterForm');

    var _permissionsKit = {
        create: abp.auth.hasPermission('Pages.Tenant.Cadastros.Faturamento.ContaKits.Create'),
        edit: abp.auth.hasPermission('Pages.Tenant.Cadastros.Faturamento.ContaKits.Edit'),
        'delete': abp.auth.hasPermission('Pages.Tenant.Cadastros.Faturamento.ContaKits.Delete')
    };

    var _createOrEditModalKit = new app.ModalManager({
        viewUrl: abp.appPath + 'Mpa/FaturamentoContaKits/CriarOuEditarModal',
        scriptUrl: abp.appPath + 'Areas/Mpa/Views/Aplicacao/Faturamentos/ContaKits/_CriarOuEditarModal.js',
        modalClass: 'CriarOuEditarContaKitModal'
    });

    _$ContaKitsTable.jtable({

        title: app.localize('Kits'),
        paging: true,
        sorting: true,
        multiSorting: true,

        actions: {
            listAction: {
                method: _ContaKitsService.listarVM
            }
        },

        fields: {
            id: {
                key: true,
                list: false
            },
            actions: {
                title: app.localize('Actions'),
                width: '5%',
                sorting: false,
                display: function (data) {
                    var $span = $('<span></span>');
                    $('<button class="btn btn-default btn-xs" title="' + app.localize('Edit') + '"><i class="fa fa-edit"></i></button>')
                        .appendTo($span)
                        .click(function (e) {
                            e.preventDefault();
                            _createOrEditModalKit.open({ id: data.record.id, contaId: '@Model.Id' });
                        });
                    $('<button class="btn btn-default btn-xs" title="' + app.localize('Delete') + '"><i class="fa fa-trash-alt"></i></button>')
                        .appendTo($span)
                        .click(function (e) {
                            e.preventDefault();
                            deleteContaKits(data.record.id);
                        });
                    return $span;
                }
            }
            ,
            codigo: {
                title: app.localize('Codigo'),
                width: '4%'
            }
            ,
            descricao: {
                title: app.localize('Descricao'),
                width: '24%'
            }
            ,
            qtde: {
                title: app.localize('Qtde.'),
                width: '3%'
            }
            ,
            medicoNome: {
                title: app.localize('Medico'),
                width: '15%'
            }
            ,
            turnoDescricao: {
                title: app.localize('Turno'),
                width: '8%'
            }
            ,
            horaIncio: {
                title: app.localize('HoraInicio'),
                width: '8%'
            }
            ,
            horaFim: {
                title: app.localize('HoraFim'),
                width: '8%'
            }
        }
    });

    $('#CreateNewKitButton').click(function () {
        var cid = '@Model.Id';
        _createOrEditModalKit.open({ id: null, contaId: cid });
    });

    function getContaKits(reload) {
        if (reload) {
            _$ContaKitsTable.jtable('reload');
        } else {
            _$ContaKitsTable.jtable('load', {
                filtro: '@Model.Id'
            });
        }
    }

    function deleteContaKits(contaItem) {

        //console.log(JSON.stringify(contaItem));
        //console.log('delete kit');
        abp.message.confirm(
            app.localize('DeleteWarning', contaItem),
            function (isConfirmed) {
                if (isConfirmed) {
                    _ContaKitsService.excluirVM(contaItem)
                        .done(function () {
                            getContaKits(true);
                            abp.notify.success(app.localize('SuccessfullyDeleted'));
                        });
                }
            }
        );
    }

    $('#GetContaKitsButton, #RefreshContaKitsListButton').click(function (e) {
        e.preventDefault();
        getContaKits();
    });

    abp.event.on('app.CriarOuEditarContaKitModalSaved', function () {
        getContaKits(true);
    });

    getContaKits();

    // Pacotes
    var _$PacotesTable = $('#PacotesTable');

    _$PacotesTable.jtable({

        title: app.localize('Pacotes'),
        paging: true,
        sorting: true,
        multiSorting: true,

        actions: {
            listAction: {
                method: _ContaItensService.listarTodos
            }
        },

        fields: {
            id: {
                key: true,
                list: false
            },
            actions: {
                title: app.localize('Actions'),
                width: '33%',
                sorting: false,
                display: function (data) {
                    var $span = $('<span></span>');
                    if (_permissions.edit) {
                        $('<button class="btn btn-default btn-xs" title="' + app.localize('Edit') + '"><i class="fa fa-edit"></i></button>')
                            .appendTo($span)
                            .click(function () {
                                _createOrEditModal.open({ id: data.record.id });
                            });
                    }
                    if (_permissions.delete) {
                        $('<button class="btn btn-default btn-xs" title="' + app.localize('Delete') + '"><i class="fa fa-trash-alt"></i></button>')
                            .appendTo($span)
                            .click(function () {
                                deleteContaItens(data.record);
                            });
                    }
                    return $span;
                }
            },
            descricao: {
                title: app.localize('Descricao'),
                width: '33%'
            }
        }
    });

</script>